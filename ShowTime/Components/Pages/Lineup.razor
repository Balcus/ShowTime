@page "/festivals/{festivalId}"
@inject IFestivalService FestivalService
@using System.Security.Claims
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dto.ArtistDto
@using ShowTime.BusinessLogic.Dto.BookingDto
@using ShowTime.BusinessLogic.Dto.FestivalDto
@using ShowTime.BusinessLogic.Dto.LineupDto
@using ShowTime.BusinessLogic.Dto.UserDto
@using ShowTime.DataAccess.Enums
@inject IHttpContextAccessor HttpContextAccessor
@inject IUserService UserService
@rendermode InteractiveServer

<PageTitle>Festival lineup</PageTitle>
@* Think we need a new table with ticket variants *@
<div class="lineup-container">
    <div class="lineup-header">
        <AuthorizeView Roles="Admin">
            <button @onclick="@(() => _showAddDialog = true)" class="lineup-btn">ðŸ“Œ Add Lineup</button>
        </AuthorizeView>
        <AuthorizeView Roles="User">
            <button @onclick="@(async () => await ShowBuyTicketDialog())" class="lineup-btn">ðŸ“Œ Book Ticket</button>
        </AuthorizeView>
        <h1 class="lineup-title">Festival Lineup</h1>
    </div>
    

    @if (ValidLineups.Any())
    {
        @foreach (var dayGroup in GroupedLineups)
        {
            <div class="day-section">
                <h2 class="day-title">@dayGroup.Key.ToString("dddd, MMMM dd, yyyy")</h2>
                
                <div class="timetable-container">
                    @foreach (var stage in GetStagesForDay(dayGroup.Value))
                    {
                        <div class="stage-row">
                            <div class="stage-label">@stage</div>
                            @foreach (var hour in GetHoursForDay(dayGroup.Value))
                            {
                                <div class="time-slot">
                                    @{
                                        var artistsInSlot = GetArtistsForTimeSlot(dayGroup.Value, stage, hour);
                                    }
                                    @foreach (var artistInfo in artistsInSlot)
                                    {
                                        <div class="artist-slot">
                                            <div class="artist-image-container">
                                                @if (!string.IsNullOrEmpty(artistInfo.Artist.Image))
                                                {
                                                    <img src="@artistInfo.Artist.Image" alt="@artistInfo.Artist.Name" class="artist-mini-image" />
                                                }
                                                else
                                                {
                                                    <div class="artist-placeholder">ðŸŽ¤</div>
                                                }
                                            </div>
                                            <div class="artist-slot-info">
                                                <div class="artist-slot-name">@artistInfo.Artist.Name</div>
                                                <div class="artist-slot-time">@artistInfo.Lineup.StartTime.ToString("HH:mm")</div>
                                                @if (!string.IsNullOrEmpty(artistInfo.Artist.Genre))
                                                {
                                                    <div class="artist-slot-genre">@artistInfo.Artist.Genre</div>
                                                }
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        }
    }
    else
    {
        <div class="no-lineup-message">
            <h2>No Lineup Available</h2>
            <p>This festival doesn't have any scheduled performances</p>
        </div>
    }
    
    <Dialog Title="Add New Lineup" Opened="_showAddDialog" CloseButtonClicked="@(() => _showAddDialog = false)">
        <BodyContent>
            <div class="sticky-form">
                <EditForm Model="NewLineup" OnValidSubmit="AddLineupAsync" FormName="AddLineupForm">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>
                    <div class="form-group">
                        <label>Artist</label>
                        <InputSelect @bind-Value="NewLineup.ArtistId" class="form-control">
                            @foreach (var artist in Artists)
                            {
                                <option value="@artist.Id">@artist.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => NewLineup.ArtistId)"/>
                    </div>
                    
                    <div class="form-group">
                        <label>Stage</label>
                        <InputText @bind-Value="NewLineup.Stage" class="form-control" placeholder="Enter a stage"/>
                        <ValidationMessage For="@(() => NewLineup.Stage)"></ValidationMessage>
                    </div>
                    
                    <div class="form-group">
                        <label>Start Time</label>
                        <input type="datetime-local" @bind="NewLineup.StartTime" class="form-control" />
                        <ValidationMessage For="@(() => NewLineup.StartTime)"></ValidationMessage>
                    </div>
                    
                    <button class="btn">Add Lineup</button>
                </EditForm>
            </div>
        </BodyContent>
    </Dialog>
    
    <Dialog Title="Book Ticket" Opened="_showBuyDialog" CloseButtonClicked="@(() => _showBuyDialog = false)">
        <BodyContent>
            <div class="sticky-form">
                <EditForm Model="NewBooking" OnValidSubmit="AddBookingAsync" FormName="AddBookingForm">
                    @* <label>Booking Type:</label> *@
                    @* <InputText @bind-Value="NewBooking.Type" class="form-control"/> *@
                    @* <label>Price:</label> *@
                    @* <InputText @bind-Value="NewBooking.Price" class="form-control"/> *@
                    <button class="btn">Book Ticket</button>
                </EditForm>
            </div>
        </BodyContent>
    </Dialog>
    
</div>

@code {
    private bool _showAddDialog;
    private bool _showBuyDialog;

    private string? _userEmail;
    private int _userId;
    
    private UserGetDto User { get; set; } = new();
    private LineupGetDto NewLineup { get; set; } = new();
    private BookingGetDto NewBooking { get; set; } = new();
    private FestivalGetDto Festival { get; set; } = new();
    
    private List<LineupGetDto> Lineups { get; set; } = [];
    private List<ArtistGetDto> Artists { get; set; } = [];
    
    [Parameter] public required string FestivalId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> Cookies { get; set; } = null!;

    private List<LineupGetDto> ValidLineups => Lineups.Where(l => l.StartTime != default(DateTime)).ToList();
    private Dictionary<DateTime, List<LineupGetDto>> GroupedLineups => 
        ValidLineups.GroupBy(l => l.StartTime.Date)
                   .ToDictionary(g => g.Key, g => g.ToList());

    protected override async Task OnInitializedAsync()
    {
        var httpContext = HttpContextAccessor.HttpContext;
        if (httpContext == null)
        {
            throw new Exception($"Http context is null!");
        }
        
        Festival = (await FestivalService.GetFestivalByIdAsync(int.Parse(FestivalId)))!;
        Lineups = await FestivalService.GetLineupsForFestivalAsync(int.Parse(FestivalId));
        Artists = await FestivalService.GetArtistsForFestivalAsync(int.Parse(FestivalId));
        NewLineup.StartTime = Festival.StartDate;
    }

    private static List<int> GetHoursForDay(List<LineupGetDto> dayLineups)
    {
        var hours = dayLineups.Select(l => l.StartTime.Hour).Distinct().OrderBy(h => h).ToList();
        if (!hours.Any()) return [];
        
        var minHour = hours.Min();
        var maxHour = hours.Max();
        var allHours = new List<int>();
        
        for (var hour = minHour; hour <= maxHour; hour++)
        {
            allHours.Add(hour);
        }
        
        return allHours;
    }

    private static List<string> GetStagesForDay(List<LineupGetDto> dayLineups)
    {
        return dayLineups.Select(l => l.Stage).Distinct().OrderBy(s => s).ToList();
    }

    private List<(LineupGetDto Lineup, ArtistGetDto Artist)> GetArtistsForTimeSlot(List<LineupGetDto> dayLineups, string stage, int hour)
    {
        var lineupsInSlot = dayLineups.Where(l => l.Stage == stage && l.StartTime.Hour == hour).ToList();
        var result = new List<(LineupGetDto, ArtistGetDto)>();
        
        foreach (var lineup in lineupsInSlot)
        {
            var artist = GetArtistById(lineup.ArtistId);
            if (artist != null)
            {
                result.Add((lineup, artist));
            }
        }
        
        return result;
    }

    private ArtistGetDto? GetArtistById(int artistId)
    {
        return Artists.FirstOrDefault(a => a.Id == artistId);
    }

    private async Task AddLineupAsync()
    {
        await FestivalService.AddFestivalLineupAsync(int.Parse(FestivalId), NewLineup);
        NewLineup = new LineupGetDto
        {
            StartTime = Festival.StartDate
        };
        Lineups = await FestivalService.GetLineupsForFestivalAsync(int.Parse(FestivalId));
        _showAddDialog = false;
    }

    private async Task ShowBuyTicketDialog()
    {
        var result = await Cookies;
        _userEmail = result.User.Claims.FirstOrDefault(u => u.Type == ClaimTypes.Email)!.Value;
        
        if (_userEmail == null)
        {
            throw new Exception("Could not retrieve email from cookies");
        }
        
        _userId = await UserService.GetUserIdByEmailAsync(_userEmail);
        NewBooking = new BookingGetDto()
        {
            FestivalId = Festival.Id,
            UserId = _userId,
            Type = BookingType.Regular,
            Price = 100f
        };
        _showBuyDialog = true;
        
    }

    private async Task AddBookingAsync()
    {
        await UserService.BookTicketAsync(_userId, NewBooking);
        NewBooking = new();
        _showBuyDialog = false;
    }

}