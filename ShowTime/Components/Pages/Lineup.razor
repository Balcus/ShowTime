@page "/festivals/{festivalId}"
@inject IFestivalService FestivalService
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dto.ArtistDto
@using ShowTime.BusinessLogic.Dto.FestivalDto
@using ShowTime.BusinessLogic.Dto.LineupDto
@using ShowTime.BusinessLogic.Dto.TicketDto
@using ShowTime.DataAccess.Enums
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Festival lineup</PageTitle>

<div class="lineup-container">
    <div class="lineup-header">
        <h1 class="lineup-title">Festival Lineup</h1>
    </div>

    @if (ValidLineups.Any())
    {
        @foreach (var dayGroup in GroupedLineups)
        {
            <div class="day-section">
                <h2 class="day-title">@dayGroup.Key.ToString("dddd, MMMM dd, yyyy")</h2>
                
                <div class="timetable-container">
                    @foreach (var stage in GetStagesForDay(dayGroup.Value))
                    {
                        <div class="stage-row">
                            <div class="stage-label">@stage</div>
                            @foreach (var hour in GetHoursForDay(dayGroup.Value))
                            {
                                <div class="time-slot">
                                    @{
                                        var artistsInSlot = GetArtistsForTimeSlot(dayGroup.Value, stage, hour);
                                    }
                                    @foreach (var artistInfo in artistsInSlot)
                                    {
                                        <div class="artist-slot">
                                            <div class="artist-image-container">
                                                @if (!string.IsNullOrEmpty(artistInfo.Artist.Image))
                                                {
                                                    <img src="@artistInfo.Artist.Image" alt="@artistInfo.Artist.Name" class="artist-mini-image" />
                                                }
                                                else
                                                {
                                                    <div class="artist-placeholder">ðŸŽ¤</div>
                                                }
                                            </div>
                                            <div class="artist-slot-info">
                                                <div class="artist-slot-name">@artistInfo.Artist.Name</div>
                                                <div class="artist-slot-time">@artistInfo.Lineup.StartTime.ToString("HH:mm")</div>
                                                @if (!string.IsNullOrEmpty(artistInfo.Artist.Genre))
                                                {
                                                    <div class="artist-slot-genre">@artistInfo.Artist.Genre</div>
                                                }
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        }
    }
    else
    {
        <div class="no-lineup-message">
            <h2>No Lineup Available</h2>
            <p>This festival doesn't have any scheduled performances</p>
        </div>
    }
    
    <div class="lineup-footer">
        <AuthorizeView Roles="Admin">
            <button @onclick="@(() => _showAddDialog = true)" class="lineup-btn">ðŸ“Œ Add Lineup</button>
            <button @onclick="@(() => _showTicketDialog = true)" class="lineup-btn">ðŸŽ« Add Ticket</button>
            <button @onclick="NavigateToTickets" class="lineup-btn">ðŸ“Œ View Tickets</button>
        </AuthorizeView>
        <AuthorizeView Roles="User">
            <button @onclick="NavigateToTickets" class="lineup-btn">ðŸ“Œ Book Ticket</button>
        </AuthorizeView>
    </div>

    
    <Dialog Title="Add New Lineup" Opened="_showAddDialog" CloseButtonClicked="@(() => _showAddDialog = false)">
        <BodyContent>
            <div class="sticky-form">
                <EditForm Model="NewLineup" OnValidSubmit="AddLineupAsync" FormName="AddLineupForm">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>
                    <div class="form-group">
                        <label>Artist</label>
                        <InputSelect @bind-Value="NewLineup.ArtistId" class="form-control">
                            @foreach (var artist in Artists)
                            {
                                <option value="@artist.Id">@artist.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => NewLineup.ArtistId)"/>
                    </div>
                    
                    <div class="form-group">
                        <label>Stage</label>
                        <InputText @bind-Value="NewLineup.Stage" class="form-control" placeholder="Enter a stage"/>
                        <ValidationMessage For="@(() => NewLineup.Stage)"></ValidationMessage>
                    </div>
                    
                    <div class="form-group">
                        <label>Start Time</label>
                        <input type="datetime-local" @bind="NewLineup.StartTime" class="form-control" />
                        <ValidationMessage For="@(() => NewLineup.StartTime)"></ValidationMessage>
                    </div>
                    
                    <button class="btn">Add Lineup</button>
                </EditForm>
            </div>
        </BodyContent>
    </Dialog>

    <Dialog Title="Add New Ticket" Opened="_showTicketDialog" CloseButtonClicked="@(() => _showTicketDialog = false)">
        <BodyContent>
            <div class="sticky-form">
                <EditForm Model="NewTicket" OnValidSubmit="AddTicketAsync" FormName="AddTicketForm">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>
                    
                    <div class="form-group">
                        <label>Ticket Name</label>
                        <InputText @bind-Value="NewTicket.Name" class="form-control" placeholder="Enter ticket name (e.g., Early Bird, VIP, Regular)"/>
                        <ValidationMessage For="@(() => NewTicket.Name)"/>
                    </div>
                    
                    <div class="form-group">
                        <label>Ticket Type</label>
                        <InputSelect @bind-Value="NewTicket.Type" class="form-control">
                            @foreach (var ticketType in Enum.GetValues<TicketType>())
                            {
                                <option value="@ticketType">@ticketType</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => NewTicket.Type)"/>
                    </div>
                    
                    <div class="form-group">
                        <label>Price</label>
                        <InputNumber @bind-Value="NewTicket.Price" class="form-control" placeholder="Enter price" step="0.01"/>
                        <ValidationMessage For="@(() => NewTicket.Price)"/>
                    </div>
                    
                    <div class="form-group">
                        <label>Quantity</label>
                        <InputNumber @bind-Value="NewTicket.Quantity" class="form-control" placeholder="Enter available quantity"/>
                        <ValidationMessage For="@(() => NewTicket.Quantity)"/>
                    </div>
                    
                    <button class="btn">Add Ticket</button>
                </EditForm>
            </div>
        </BodyContent>
    </Dialog>
    
</div>

@code {
    private bool _showAddDialog;
    private bool _showTicketDialog;
    private int _festivalId;

    private LineupGetDto NewLineup { get; set; } = new();
    private TicketCreateDto NewTicket { get; set; } = new();
    private FestivalGetDto Festival { get; set; } = new();
    private List<TicketGetDto> FestivalTickets { get; set; } = [];
    
    private List<LineupGetDto> Lineups { get; set; } = [];
    private List<ArtistGetDto> Artists { get; set; } = [];

    [Parameter] public required string FestivalId { get; set; }

    private List<LineupGetDto> ValidLineups => Lineups.Where(l => l.StartTime != default(DateTime)).ToList();
    private Dictionary<DateTime, List<LineupGetDto>> GroupedLineups => 
        ValidLineups.GroupBy(l => l.StartTime.Date)
                   .ToDictionary(g => g.Key, g => g.ToList());

    protected override async Task OnInitializedAsync()
    {
        var httpContext = HttpContextAccessor.HttpContext;
        if (httpContext == null)
        {
            throw new Exception($"Http context is null!");
        }
        
        _festivalId = int.Parse(FestivalId);
        Festival = (await FestivalService.GetFestivalByIdAsync(_festivalId))!;
        Lineups = await FestivalService.GetLineupsForFestivalAsync(_festivalId);
        Artists = await FestivalService.GetArtistsForFestivalAsync(_festivalId);
        FestivalTickets = await FestivalService.GetTicketsForFestivalAsync(_festivalId);
        NewLineup.StartTime = Festival.StartDate;
        
        NewTicket = new TicketCreateDto { FestivalId = _festivalId };
    }

    private static List<int> GetHoursForDay(List<LineupGetDto> dayLineups)
    {
        var hours = dayLineups.Select(l => l.StartTime.Hour).Distinct().OrderBy(h => h).ToList();
        if (!hours.Any()) return [];
        
        var minHour = hours.Min();
        var maxHour = hours.Max();
        var allHours = new List<int>();
        
        for (var hour = minHour; hour <= maxHour; hour++)
        {
            allHours.Add(hour);
        }
        
        return allHours;
    }

    private static List<string> GetStagesForDay(List<LineupGetDto> dayLineups)
    {
        return dayLineups.Select(l => l.Stage).Distinct().OrderBy(s => s).ToList();
    }

    private List<(LineupGetDto Lineup, ArtistGetDto Artist)> GetArtistsForTimeSlot(List<LineupGetDto> dayLineups, string stage, int hour)
    {
        var lineupsInSlot = dayLineups.Where(l => l.Stage == stage && l.StartTime.Hour == hour).ToList();
        var result = new List<(LineupGetDto, ArtistGetDto)>();
        
        foreach (var lineup in lineupsInSlot)
        {
            var artist = GetArtistById(lineup.ArtistId);
            if (artist != null)
            {
                result.Add((lineup, artist));
            }
        }
        
        return result;
    }

    private ArtistGetDto? GetArtistById(int artistId)
    {
        return Artists.FirstOrDefault(a => a.Id == artistId);
    }

    private async Task AddLineupAsync()
    {
        await FestivalService.AddFestivalLineupAsync(int.Parse(FestivalId), NewLineup);
        NewLineup = new LineupGetDto
        {
            StartTime = Festival.StartDate
        };
        Lineups = await FestivalService.GetLineupsForFestivalAsync(int.Parse(FestivalId));
        _showAddDialog = false;
    }

    private async Task AddTicketAsync()
    {
        await FestivalService.AddTicketForFestivalAsync(_festivalId, NewTicket);
        NewTicket = new TicketCreateDto { FestivalId = _festivalId };
        FestivalTickets = await FestivalService.GetTicketsForFestivalAsync(_festivalId);
        _showTicketDialog = false;
    }

    private void NavigateToTickets()
    {
        NavigationManager.NavigateTo($"/festivals/{FestivalId}/tickets");
    }

}