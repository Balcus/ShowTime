@page "/login"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dto.UserDto
@using ShowTime.DataAccess.Enums
@using ShowTime.DataAccess.Exceptions
@inject IUserService UserService
@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>Login</PageTitle>

<div class="page">
    <div class="container">
        <div class="wrapper">
            <div class="form">
                <h2 class="title">Log in</h2>
                <p class="subtitle">Welcome back!</p>

                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="alert alert-danger" style="color: red; margin-bottom: 20px; padding: 10px; border: 1px solid red; border-radius: 5px; background-color: #fee;">
                        @ErrorMessage
                    </div>
                }

                <EditForm Model="LoginInfo" OnValidSubmit="Authenticate" FormName="LoginForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label>Email</label>
                        <InputText @bind-Value="LoginInfo.Email" class="form-control" @oninput="ClearErrorMessage" />
                    </div>

                    <div class="form-group">
                        <label>Password</label>
                        <InputText type="password" @bind-Value="LoginInfo.Password" class="form-control" @oninput="ClearErrorMessage" />
                    </div>

                    <button class="submit-btn">Login</button>
                </EditForm>
                
                <div class="register-account">
                    <p>Don't have an account?</p>
                    <a href="/register" class="register-btn">Register</a>
                </div>
            </div>

            <div class="image">
                <img src="https://images.unsplash.com/photo-1581850518616-bcb8077a2336?q=80&w=1170&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D" alt="Login Image" />
            </div>
        </div>
    </div>
</div>

<Notification @ref="_notification" />

@code {
    [SupplyParameterFromForm] private LoginDto LoginInfo { get; set; } = new();
    private string ErrorMessage { get; set; } = string.Empty;
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = null!;
    private Notification _notification = null!;

    private void ClearErrorMessage()
    {
        ErrorMessage = string.Empty;
    }

    private async Task Authenticate()
    {
        ErrorMessage = string.Empty;

        try
        {
            var response = await UserService.LoginAsync(LoginInfo);
            var claims = new List<Claim>
            {
                new(ClaimTypes.Email, LoginInfo.Email),
                new(ClaimTypes.Role, Enum.GetName(typeof(UserRole), response.Role) ?? nameof(UserRole.User))
            };

            var claimIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);

            var httpContext = HttpContextAccessor.HttpContext;
            if (httpContext != null)
            {
                HttpContext.Response.Redirect("/");
            }
            else
            {
                throw new Exception($"Http context is null!");
            }
        }
        catch (UserDoesntExistException)
        {
            ErrorMessage = "The email does not correspond to a user. Please register";
        }
        catch (WrongPasswordError)
        {
            ErrorMessage = "The provided password is wrong";
        }
        catch (Exception e)
        {
            await _notification.ShowNotificationAsync("‚ùå There was an error while trying to authenticate, Please try again");
        }
    }
}