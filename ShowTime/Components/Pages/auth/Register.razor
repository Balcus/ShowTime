@page "/register"
@using System.Security.Cryptography
@using Microsoft.AspNetCore.Cryptography.KeyDerivation
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dto.UserDto
@inject IUserService UserService
@rendermode InteractiveServer

<Dialog Title="Register User" Opened="true" CloseButtonClicked="(() => GoBack())">
    <BodyContent>
        <div class="sticky-form">
            <EditForm Model="RegisteredUser" OnValidSubmit="RegisterUser">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <label>Email :</label>
                <InputText @bind-Value="RegisteredUser.Email" class="form-control"/>
                <label>Password :</label>
                <InputText type="password" @bind-Value="RegisteredUser.Password" class="form-control"/>
                <button class="btn btn-primary">Register User</button>
            </EditForm>
        </div>
    </BodyContent>
</Dialog>

@code {
    private LoginDto RegisteredUser { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        
    }

    private void RegisterUser()
    {
        var dbUser = new LoginDto()
        {
            Email = RegisteredUser.Email,
            Password = HashPassword(RegisteredUser.Password)
        };
        UserService.CreateUserAsync(dbUser);
        RegisteredUser = new();
    }

    private void GoBack()
    {
        Console.WriteLine("Should redirect to home-page");
    }

    private static string HashPassword(string password)
    {
        byte[] salt = RandomNumberGenerator.GetBytes(128 / 8);
        string hashedPassword = Convert.ToBase64String(KeyDerivation.Pbkdf2(
            password: password!,
            salt: salt,
            prf: KeyDerivationPrf.HMACSHA256,
            iterationCount: 10000,
            numBytesRequested: 256 / 8
        ));
        return hashedPassword;
    }

}