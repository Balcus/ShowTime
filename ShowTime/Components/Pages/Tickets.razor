@page "/festivals/{festivalId}/tickets"
@using System.Security.Claims
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dto.TicketDto
@inject IFestivalService FestivalService
@inject IUserService UserService
@rendermode InteractiveServer

<PageTitle>Tickets</PageTitle>

<div class="ticket-container">
    @foreach (var ticket in FestivalTickets)
    {
        <TicketCard Ticket="ticket" OnBuy="HandleBuy" OnEdit="HandleEdit"/>
    }
    
    <Notification @ref="_notificationBanner" />
</div>

@code {
    private int _festivalId;
    private int _userId;
    private Notification _notificationBanner = null!;
    
    [Parameter] public required string FestivalId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> Cookies { get; set; } = null!;
    private List<TicketGetDto> FestivalTickets { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        _festivalId = int.Parse(FestivalId);
        FestivalTickets = await FestivalService.GetTicketsForFestivalAsync(_festivalId);
        var result = await Cookies;
        var userEmail = result.User.Claims.FirstOrDefault(u => u.Type == ClaimTypes.Email)?.Value;

        if (userEmail == null)
        {
            throw new Exception("Could not retrieve email from cookies");
        }

        _userId = await UserService.GetUserIdByEmailAsync(userEmail);
    }

    private async Task HandleBuy(TicketGetDto ticket)
    {
        try
        {
            await UserService.BookTicketAsync(_userId, ticket.Id);
            await _notificationBanner.ShowNotificationAsync(
                $"✅ Ticket for {ticket.Type} booked!", 
                "#e6f8d1"
            );
        }
        catch (Exception ex)
        {
            await _notificationBanner.ShowNotificationAsync(
                $"❌ Failed to book ticket: {ex.Message}", 
                "#ffebee"
            );
        }
    }

    private async Task HandleEdit()
    {
        try
        {
            
        }
        catch (Exception e)
        {
            throw new Exception($"Exception raised while editing ticket");
        }
    }
}