@page "/artists"
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dto.ArtistDto
@inject IArtistService ArtistService;
@rendermode InteractiveServer
<link href="https://fonts.googleapis.com/css2?family=Reenie+Beanie&display=swap" rel="stylesheet">

<PageTitle>Artists</PageTitle>
<div class="page">
    <div class="content">
        <AuthorizeView Roles="Admin">
            <div class="add-container">
                <button @onclick="ShowAddDialog" class="add">üìå</button>
            </div>
        </AuthorizeView>

        @if (_artists.Count == 0)
        {
            <h1>No Artists Added !</h1>
        }
        else
        {
            <ul>
                @foreach (var artist in _artists)
                {
                    var bgColor = GetRandomColor();
                    <li>
                        <div class="sticky-note" style="background: @bgColor">
                            <img src="@artist.Image" alt="@artist.Name logo"/>
                            <h2>@artist.Name</h2>
                            <p>@artist.Genre</p>
                            
                            <AuthorizeView Roles="Admin">
                                <div class="controls">
                                    <button @onclick="@(async () => await DeleteArtistAsync(artist.Id))">üóëÔ∏è</button>
                                    <button @onclick="@(() => ShowUpdateDialog(artist))">‚úèÔ∏è</button>
                                </div>
                            </AuthorizeView>
                        </div>
                    </li>
                }
            </ul>

            <Dialog Title="Add New Artist" Opened="_showAddDialog" CloseButtonClicked="@(() => _showAddDialog = false)">
                <BodyContent>
                    <div class="sticky-form">
                        <EditForm Model="NewArtist" OnValidSubmit="AddArtistAsync" FormName="AddArtistForm">
                            <DataAnnotationsValidator/>
                            <label>Name:</label>
                            <InputText @bind-Value="NewArtist.Name" class="form-control"/>
                            <label>Genre:</label>
                            <InputText @bind-Value="NewArtist.Genre" class="form-control"/>
                            <label>Image:</label>
                            <InputText @bind-Value="NewArtist.Image" class="form-control"/>
                            <button class="btn">Add Band</button>
                        </EditForm>
                    </div>
                </BodyContent>
            </Dialog>

            <Dialog Title="Update Artist" Opened="_showUpdateDialog" CloseButtonClicked="@(() => _showUpdateDialog = false)">
                <BodyContent>
                    <div class="sticky-form">
                        <EditForm Model="UpdatedArtist" OnValidSubmit="SubmitUpdatedArtistAsync">
                            <DataAnnotationsValidator/>
                            <ValidationSummary/>
                            <label>New Name:</label>
                            <InputText @bind-Value="UpdatedArtist.Name" class="form-control"/>
                            <label>New Genre:</label>
                            <InputText @bind-Value="UpdatedArtist.Genre" class="form-control"/>
                            <label>New Image:</label>
                            <InputText @bind-Value="UpdatedArtist.Image" class="form-control"/>
                            <button class="btn btn-primary">Update Band</button>
                        </EditForm>
                    </div>
                </BodyContent>
            </Dialog>
        }
    </div>
</div>

<Notification @ref="_notification" />

@code {
    private int _editArtistId;
    private bool _showAddDialog;
    private bool _showUpdateDialog;
    private Notification _notification = null!;
    private IList<ArtistGetDto> _artists = new List<ArtistGetDto>();
    [SupplyParameterFromForm]
    private ArtistCreateDto NewArtist { get; set; } = new();

    [SupplyParameterFromForm] 
    private ArtistCreateDto UpdatedArtist { get; set; } = new();

    private readonly string[] _stickyNotesColor =
    [
        "#ff7eb9 ",
        "#ff65a3 ",
        "#7afcff ",
        "#feff9c",
        "#fff740"
    ];

    private readonly Random _random = new Random();

    private string GetRandomColor()
    {
        var i = _random.Next(_stickyNotesColor.Length);
        return _stickyNotesColor[i];
    }
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _artists = await ArtistService.GetAllArtistsAsync();
        }
        catch (Exception e)
        {
            await _notification.ShowNotificationAsync($"‚ùå There was an error retrieving artists from database. Please try again later and report the issue");
        }
    }

    private async Task AddArtistAsync()
    {
        try
        {
            await ArtistService.AddArtistAsync(NewArtist);
            NewArtist = new ArtistCreateDto();
            _artists = await ArtistService.GetAllArtistsAsync();
            _showAddDialog = false;
        }
        catch (Exception e)
        {
            await _notification.ShowNotificationAsync($"‚ùå There was an error adding an artist to the database. Please try again later and report the issue");
        }
    }

    private async Task DeleteArtistAsync(int id)
    {
        try
        {
            await ArtistService.DeleteArtistAsync(id);
            _artists = await ArtistService.GetAllArtistsAsync();
        }
        catch (Exception e)
        {
            await _notification.ShowNotificationAsync($"‚ùå There was an error removing an artist from the database. Please try again later and report the issue");
        }

    }

    private void ShowAddDialog()
    {
        _showAddDialog = true;
    }
    
    private void ShowUpdateDialog(ArtistGetDto updatedArtist)
    {
        _editArtistId = updatedArtist.Id;
        UpdatedArtist = new ArtistCreateDto()
        {
            Name = updatedArtist.Name,
            Genre = updatedArtist.Genre,
            Image = updatedArtist.Image,
        };
        _showUpdateDialog = true;
    }

    private async Task SubmitUpdatedArtistAsync()
    {
        _showUpdateDialog = false;
        try
        {
            await ArtistService.UpdateArtistAsync(_editArtistId, UpdatedArtist);
            UpdatedArtist = new ArtistCreateDto();
            _artists = await ArtistService.GetAllArtistsAsync();
        }
        catch (Exception e)
        {
            await _notification.ShowNotificationAsync($"‚ùå There was an error while updating an artist. Please try again later and report the issue");
        }
    }
}