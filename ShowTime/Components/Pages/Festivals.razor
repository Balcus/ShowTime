@page "/festivals"
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dto.ArtistDto
@using ShowTime.BusinessLogic.Dto.FestivalDto
@inject IFestivalService FestivalService
@inject IArtistService ArtistService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Festivals</PageTitle>

<div class="festivals-container">
    <div class="control-container">
        <AuthorizeView Roles="Admin">
            <div class="add-btn">
                <button @onclick="(() => _showAddDialog = true)">üìå</button>
            </div>
        </AuthorizeView>
        <div class="search-bar">
            <SearchBox Items="_festivals" OnSearch="UpdateFilteredFestivals"/>
        </div>
    </div>

    <div class="festivals-stack">
        @foreach (var festival in _filteredFestivals)
        {
            <div class="festival-card">
                
                <div class="card-actions">
                    <button class="action-btn view-btn" @onclick="(() => ViewFestival(festival.Id))">üëÅÔ∏è</button>
                    <AuthorizeView Roles="Admin">
                        <button class="action-btn edit-btn" @onclick="(() => ShowUpdateDialog(festival))">‚úèÔ∏è</button>
                        <button class="action-btn remove-btn" @onclick="(async () => await DeleteFestivalAsync(festival.Id))">üóëÔ∏è</button>
                        <button class="action-btn add-band-btn" @onclick="(() => ShowUpdateArtistsDialog(festival))">üé∏</button>
                    </AuthorizeView>
                </div>

                <div class="festival-content">
                    <div class="festival-splash">
                        <img src="@festival.SplashArt"
                             alt="@festival.Name"
                             class="splash-image"/>
                    </div>

                    <div class="festival-info">
                        <div class="festival-header">
                            <h2 class="festival-name">@festival.Name</h2>
                            
                            <div class="festival-meta">
                                <span class="location-badge">üìç @festival.Location</span>
                                <span class="date-badge">üìÖ @festival.StartDate.ToString("MMM dd") - @festival.EndDate.ToString("MMM dd")</span>
                                <span class="capacity-badge">üë• @festival.Capacity</span>
                            </div>
                        </div>
                        
                        <div class="artists-section">
                            <div class="artists-grid">
                                @foreach (var artist in festival.Artists.Take(5))
                                {
                                    <div class="artist-badge">
                                        @if (!string.IsNullOrEmpty(artist.Image))
                                        {
                                            <img src="@artist.Image" alt="@artist.Name" class="artist-image"/>
                                        }
                                        <span class="artist-name">@artist.Name</span>
                                    </div>
                                }
                                @if (festival.Artists.Count > 5)
                                {
                                    <div class="artist-badge more-artists">
                                        <span class="more-count">+@(festival.Artists.Count - 5)</span>
                                        <span class="more-text">MORE</span>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    
    <Dialog Title="Add New Festival" Opened="_showAddDialog" CloseButtonClicked="@(() => _showAddDialog = false)">
        <BodyContent>
            <div class="sticky-form">
                <EditForm Model="NewFestival" OnValidSubmit="(async () => await AddFestivalAsync())" FormName="AddFestivalForm">
                    <DataAnnotationsValidator />
                    <label>Name:</label>
                    <InputText @bind-Value="NewFestival.Name" class="form-control"/>
                    <label>Splash Art:</label>
                    <InputText @bind-Value="NewFestival.SplashArt" class="form-control"/>
                    <label>Start Date:</label>
                    <InputDate @bind-Value="NewFestival.StartDate" class="form-control" min="@DateTime.Now.ToString("yyyy MMMM dd")"/>
                    <label>End Date:</label>
                    <InputDate @bind-Value="NewFestival.EndDate" class="form-control" min="@DateTime.Now.ToString("yyyy MMMM dd")"/>
                    <label>Capacity:</label>
                    <InputNumber @bind-Value="NewFestival.Capacity" class="form-control"/>
                    <label>Location:</label>
                    <InputText @bind-Value="NewFestival.Location" class="form-control"/>
                    <button class="btn">Add Festival</button>
                </EditForm>
            </div>
        </BodyContent>
    </Dialog>
    
    <Dialog Title="Update Festival" Opened="_showUpdateDialog" CloseButtonClicked="@(() => _showUpdateDialog = false)">
        <BodyContent>
            <div class="sticky-form">
                <EditForm Model="UpdatedFestival" OnValidSubmit="(async () => await UpdatedFestivalAsync())" FormName="UpdateFestivalForm">
                    <DataAnnotationsValidator />
                    <label>New Name:</label>
                    <InputText @bind-Value="UpdatedFestival.Name" class="form-control"/>
                    <label>New Splash Art:</label>
                    <InputText @bind-Value="UpdatedFestival.SplashArt" class="form-control"/>
                    <label>New Start Date:</label>
                    <InputDate @bind-Value="UpdatedFestival.StartDate" class="form-control" min="@DateTime.Now.ToString("yyyy MMMM dd")"/>
                    <label>New End Date:</label>
                    <InputDate @bind-Value="UpdatedFestival.EndDate" class="form-control" min="@DateTime.Now.ToString("yyyy MMMM dd")"/>
                    <label>New Capacity:</label>
                    <InputNumber @bind-Value="UpdatedFestival.Capacity" class="form-control"/>
                    <label>New Location:</label>
                    <InputText @bind-Value="UpdatedFestival.Location" class="form-control"/>
                    <button class="btn">Update Festival</button>
                </EditForm>
            </div>
        </BodyContent>
    </Dialog>
    
    <Dialog Title="Update Festival Artists" Opened="_showUpdateArtistsDialog" CloseButtonClicked="@(() => _showUpdateArtistsDialog = false)">
        <BodyContent>
            <EditForm Model="_allArtists" OnValidSubmit="UpdateFestivalArtistsAsync">
                <div class="artist-list">
                    @foreach (var artist in _allArtists)
                    {
                        <div>
                            <input type="checkbox"
                                   @bind="artist.IsSelected"
                                   class="form-check-input"
                                   id="artist-@artist.Id" />
                            <label for="artist-@artist.Id">@artist.Name</label>
                        </div>
                    }
                </div>
                <button class="update-artist-btn">Update Artists</button>
            </EditForm>
        </BodyContent>
    </Dialog>

</div>

@code {
    private class SelectableArtist
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string? Image { get; set; }
        public string? Genre { get; set; }
        public bool IsSelected { get; set; }
    }

    
    private bool _showAddDialog = false;
    private bool _showUpdateDialog = false;
    private bool _showUpdateArtistsDialog = false;

    private FestivalCreateDto UpdatedFestival { get; set; } = new();
    private int _updateFestivalId;
    
    private List<FullFestivalDto> _festivals = new();
    private List<FullFestivalDto> _filteredFestivals = new();
    [SupplyParameterFromForm] private FestivalCreateDto NewFestival { get; set; } = new ();

    private List<ArtistGetDto> _festivalUpdatedArtists = new();
    private int _festivalEditArtistsId;
    
    private List<SelectableArtist> _allArtists = new();
    
    protected override async Task OnInitializedAsync()
    {
        _festivals = await FestivalService.GetAllFestivalsFullAsync();
        _filteredFestivals = _festivals;
    }
    
    private async Task UpdateFestivalArtistsAsync()
    {
        var selectedArtists = _allArtists
            .Where(a => a.IsSelected)
            .Select(a => new ArtistGetDto
            {
                Id = a.Id,
                Name = a.Name,
                Genre = a.Genre,
                Image = a.Image
            }).ToList();

        await FestivalService.UpdateFestivalArtistsAsync(_festivalEditArtistsId, selectedArtists);

        _festivals = await FestivalService.GetAllFestivalsFullAsync();
        _filteredFestivals = _festivals;

        _showUpdateArtistsDialog = false;
    }


    private async Task ShowUpdateArtistsDialog(FullFestivalDto festival)
    {
        _festivalEditArtistsId = festival.Id;

        var allArtists = await ArtistService.GetAllArtistsAsync();

        var selectedIds = festival.Artists.Select(a => a.Id).ToHashSet();

        _allArtists = allArtists.Select(a => new SelectableArtist
        {
            Id = a.Id,
            Name = a.Name,
            Image = a.Image,
            Genre = a.Genre,
            IsSelected = selectedIds.Contains(a.Id)
        }).ToList();

        _showUpdateArtistsDialog = true;
    }

    private async Task DeleteFestivalAsync(int festivalId)
    {
        await FestivalService.DeleteFestivalAsync(festivalId);
        _festivals = await FestivalService.GetAllFestivalsFullAsync();
    }

    private async Task AddFestivalAsync()
    {
        await FestivalService.AddFestivalAsync(NewFestival);
        _festivals = await FestivalService.GetAllFestivalsFullAsync();
        _filteredFestivals = _festivals;
        NewFestival = new FestivalCreateDto();
        _showAddDialog = false;
    }

    void UpdateFilteredFestivals(string? searchTerm)
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            _filteredFestivals = _festivals;
        }
        else
        {
            _filteredFestivals = _festivals.Where(
                f => f.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                f.Artists.Any(a => a.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                f.Location.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
    }

    private async Task UpdatedFestivalAsync()
    {
        await FestivalService.UpdateFestivalAsync(_updateFestivalId,new FestivalCreateDto()
        {
            Capacity = UpdatedFestival.Capacity,
            EndDate = UpdatedFestival.EndDate,
            StartDate = UpdatedFestival.StartDate,
            Location = UpdatedFestival.Location,
            Name = UpdatedFestival.Name,
            SplashArt = UpdatedFestival.SplashArt
        });
        _festivals = await FestivalService.GetAllFestivalsFullAsync();
        _filteredFestivals = _festivals;
        _showUpdateDialog = false;
    }

    private void ShowUpdateDialog(FullFestivalDto updatedFestival)
    {
        _updateFestivalId = updatedFestival.Id;
        UpdatedFestival = new FestivalCreateDto()
        {
            Name = updatedFestival.Name,
            Capacity = updatedFestival.Capacity,
            Location = updatedFestival.Location,
            StartDate = updatedFestival.StartDate,
            EndDate = updatedFestival.EndDate,
            SplashArt = updatedFestival.SplashArt
        };
        _showUpdateDialog = true;
    }

    private void ViewFestival(int festivalId)
    {
        Navigation.NavigateTo($"/festivals/{festivalId}");
    }
}